From 474c2a3850e7d41a815f13a497833f0572b43e69 Mon Sep 17 00:00:00 2001
From: Meticulus <theonejohnnyd@gmail.com>
Date: Mon, 3 Oct 2016 07:36:14 -0500
Subject: [PATCH] ril patch

Change-Id: Idac45c79a95d7a6406d849f87a646e3bea1fe74c
---
 src/java/android/telephony/SmsMessage.java         |  2 +-
 src/java/com/android/internal/telephony/RIL.java   | 45 ++++++-----
 .../telephony/dataconnection/DcTracker.java        |  3 -
 .../internal/telephony/uicc/IccFileHandler.java    | 91 +++++++---------------
 4 files changed, 53 insertions(+), 88 deletions(-)

diff --git a/src/java/android/telephony/SmsMessage.java b/src/java/android/telephony/SmsMessage.java
index bf04c3d..03676b7 100644
--- a/src/java/android/telephony/SmsMessage.java
+++ b/src/java/android/telephony/SmsMessage.java
@@ -609,7 +609,7 @@ public class SmsMessage {
      * Returns the service centre timestamp in currentTimeMillis() format
      */
     public long getTimestampMillis() {
-        return mWrappedSmsMessage != null ? mWrappedSmsMessage.getTimestampMillis() : 0;
+        return mWrappedSmsMessage.getTimestampMillis();
     }
 
     /**
diff --git a/src/java/com/android/internal/telephony/RIL.java b/src/java/com/android/internal/telephony/RIL.java
index 2b22a61..0127270 100644
--- a/src/java/com/android/internal/telephony/RIL.java
+++ b/src/java/com/android/internal/telephony/RIL.java
@@ -106,11 +106,11 @@ class RILRequest {
     //***** Class Variables
     static Random sRandom = new Random();
     static AtomicInteger sNextSerial = new AtomicInteger(0);
-    private static Object sPoolSync = new Object();
-    private static RILRequest sPool = null;
-    private static int sPoolSize = 0;
-    private static final int MAX_POOL_SIZE = 4;
-    private Context mContext;
+    protected static Object sPoolSync = new Object();
+    protected static RILRequest sPool = null;
+    protected static int sPoolSize = 0;
+    protected static final int MAX_POOL_SIZE = 4;
+    protected Context mContext;
 
     //***** Instance Variables
     int mSerial;
@@ -175,7 +175,7 @@ class RILRequest {
         }
     }
 
-    private RILRequest() {
+    protected RILRequest() {
     }
 
     static void
@@ -247,7 +247,7 @@ public class RIL extends BaseCommands implements CommandsInterface {
      * Wake lock timeout should be longer than the longest timeout in
      * the vendor ril.
      */
-    private static final int DEFAULT_WAKE_LOCK_TIMEOUT = 60000;
+    protected static final int DEFAULT_WAKE_LOCK_TIMEOUT = 60000;
     private static final int BYTE_SIZE = 1;
 
     /** Starting number for OEMHOOK request and response IDs */
@@ -309,9 +309,9 @@ public class RIL extends BaseCommands implements CommandsInterface {
 
     // The number of the required config values for broadcast SMS stored in the C struct
     // RIL_CDMA_BroadcastServiceInfo
-    private static final int CDMA_BSI_NO_OF_INTS_STRUCT = 3;
+    protected static final int CDMA_BSI_NO_OF_INTS_STRUCT = 3;
 
-    private static final int CDMA_BROADCAST_SMS_NO_OF_SERVICE_CATEGORIES = 31;
+    protected static final int CDMA_BROADCAST_SMS_NO_OF_SERVICE_CATEGORIES = 31;
 
     private static final char NULL_TERMINATOR = '\0';
 
@@ -320,7 +320,7 @@ public class RIL extends BaseCommands implements CommandsInterface {
     /** Sim DePersonalization code */
     private static final int OEMHOOK_EVT_HOOK_ENTER_DEPERSONALIZATION_CODE = OEMHOOK_BASE + 51;
 
-    private final DisplayManager.DisplayListener mDisplayListener =
+    protected final DisplayManager.DisplayListener mDisplayListener =
             new DisplayManager.DisplayListener() {
         @Override
         public void onDisplayAdded(int displayId) { }
@@ -340,7 +340,7 @@ public class RIL extends BaseCommands implements CommandsInterface {
         }
     };
 
-    private final BroadcastReceiver mBatteryStateListener = new BroadcastReceiver() {
+    protected final BroadcastReceiver mBatteryStateListener = new BroadcastReceiver() {
         @Override
         public void onReceive(Context context, Intent intent) {
             boolean oldState = mIsDevicePlugged;
@@ -481,7 +481,7 @@ public class RIL extends BaseCommands implements CommandsInterface {
      * @return Length of message less header, or -1 on end of stream.
      * @throws IOException
      */
-    private static int readRilMessage(InputStream is, byte[] buffer)
+    protected static int readRilMessage(InputStream is, byte[] buffer)
             throws IOException {
         int countRead;
         int offset;
@@ -1396,7 +1396,7 @@ public class RIL extends BaseCommands implements CommandsInterface {
         send(rr);
     }
 
-    private void
+    protected void
     constructGsmSendSmsRilRequest (RILRequest rr, String smscPDU, String pdu) {
         rr.mParcel.writeInt(2);
         rr.mParcel.writeString(smscPDU);
@@ -1428,7 +1428,7 @@ public class RIL extends BaseCommands implements CommandsInterface {
         send(rr);
     }
 
-    private void
+    protected void
     constructCdmaSendSmsRilRequest(RILRequest rr, byte[] pdu) {
         int address_nbr_of_digits;
         int subaddr_nbr_of_digits;
@@ -1672,7 +1672,7 @@ public class RIL extends BaseCommands implements CommandsInterface {
      *  Translates EF_SMS status bits to a status value compatible with
      *  SMS AT commands.  See TS 27.005 3.1.
      */
-    private int translateStatus(int status) {
+    protected int translateStatus(int status) {
         switch(status & 0x7) {
             case SmsManager.STATUS_ON_ICC_READ:
                 return 1;
@@ -2479,7 +2479,7 @@ public class RIL extends BaseCommands implements CommandsInterface {
      * Update the screen state. Send screen state ON if the default display is ON or the device
      * is plugged.
      */
-    private void updateScreenState() {
+    protected void updateScreenState() {
         final int oldState = mRadioScreenState;
         mRadioScreenState = (mDefaultDisplayState == Display.STATE_ON || mIsDevicePlugged)
                 ? RADIO_SCREEN_ON : RADIO_SCREEN_OFF;
@@ -2514,8 +2514,9 @@ public class RIL extends BaseCommands implements CommandsInterface {
     protected RadioState getRadioStateFromInt(int stateInt) {
         RadioState state;
 
+	int stateIntNormalized = convertRadioState(stateInt);
         /* RIL_RadioState ril.h */
-        switch(stateInt) {
+        switch(stateIntNormalized) {
             case 0: state = RadioState.RADIO_OFF; break;
             case 1: state = RadioState.RADIO_UNAVAILABLE; break;
             case 2:
@@ -2534,7 +2535,9 @@ public class RIL extends BaseCommands implements CommandsInterface {
         }
         return state;
     }
-
+    protected int convertRadioState(int paramInt){
+	return paramInt > 1 && paramInt < 10 ? 10 : paramInt;
+}
     protected void switchToRadioState(RadioState newState) {
         setRadioState(newState);
     }
@@ -2548,7 +2551,7 @@ public class RIL extends BaseCommands implements CommandsInterface {
      * happen often.
      */
 
-    private void
+    protected void
     acquireWakeLock() {
         synchronized (mWakeLock) {
             mWakeLock.acquire();
@@ -2560,7 +2563,7 @@ public class RIL extends BaseCommands implements CommandsInterface {
         }
     }
 
-    private void
+    protected void
     decrementWakeLock() {
         synchronized (mWakeLock) {
             if (mWakeLockCount > 1) {
@@ -2574,7 +2577,7 @@ public class RIL extends BaseCommands implements CommandsInterface {
     }
 
     // true if we had the wakelock
-    private boolean
+    protected boolean
     clearWakeLock() {
         synchronized (mWakeLock) {
             if (mWakeLockCount == 0 && mWakeLock.isHeld() == false) return false;
diff --git a/src/java/com/android/internal/telephony/dataconnection/DcTracker.java b/src/java/com/android/internal/telephony/dataconnection/DcTracker.java
index bd59e52..e1569ae 100644
--- a/src/java/com/android/internal/telephony/dataconnection/DcTracker.java
+++ b/src/java/com/android/internal/telephony/dataconnection/DcTracker.java
@@ -1702,9 +1702,6 @@ public class DcTracker extends DcTrackerBase {
                 // those requests and not torn down organically.
                 if ((apnContext.getApnType() == PhoneConstants.APN_TYPE_DUN && teardownForDun())
                         || apnContext.getState() != DctConstants.State.CONNECTED
-                        || (ConfigResourceUtil.getBooleanValue(mPhone.getContext(),
-                               "config_enable_mms_with_mobile_data_off") &&
-                            apnContext.getApnType().equals(PhoneConstants.APN_TYPE_MMS))
                         || mPhone.getSubId() != SubscriptionManager.getDefaultDataSubId() ) {
                     cleanup = true;
                 } else {
diff --git a/src/java/com/android/internal/telephony/uicc/IccFileHandler.java b/src/java/com/android/internal/telephony/uicc/IccFileHandler.java
index 22d0dfe..a84eb46 100644
--- a/src/java/com/android/internal/telephony/uicc/IccFileHandler.java
+++ b/src/java/com/android/internal/telephony/uicc/IccFileHandler.java
@@ -359,7 +359,7 @@ public abstract class IccFileHandler extends Handler implements IccConstants {
                         fileid, 0, onLoaded);
 
         mCi.iccIOForApp(COMMAND_GET_RESPONSE, fileid, getEFPath(fileid),
-                        0, 0, 0, null, null, mAid, response);
+                        0, 0, GET_RESPONSE_EF_SIZE_BYTES, null, null, mAid, response);
     }
 
     /**
@@ -538,30 +538,17 @@ public abstract class IccFileHandler extends Handler implements IccConstants {
 
                 data = result.payload;
 
-                if (UiccTlvData.isUiccTlvData(data)) {
-                    UiccTlvData tlvData = UiccTlvData.parse(data);
-
-                    if (tlvData.isIncomplete()) {
-                        throw new IccFileTypeMismatch();
-                    }
-
-                    recordSize = new int[3];
-                    recordSize[0] = tlvData.mRecordSize;
-                    recordSize[1] = tlvData.mFileSize;
-                    recordSize[2] = tlvData.mNumRecords;
-                } else {
-                    if (TYPE_EF != data[RESPONSE_DATA_FILE_TYPE] ||
-                        EF_TYPE_LINEAR_FIXED != data[RESPONSE_DATA_STRUCTURE]) {
-                        throw new IccFileTypeMismatch();
-                    }
-
-                    recordSize = new int[3];
-                    recordSize[0] = data[RESPONSE_DATA_RECORD_LENGTH] & 0xFF;
-                    recordSize[1] = ((data[RESPONSE_DATA_FILE_SIZE_1] & 0xff) << 8)
-                           + (data[RESPONSE_DATA_FILE_SIZE_2] & 0xff);
-                    recordSize[2] = recordSize[1] / recordSize[0];
+                if (TYPE_EF != data[RESPONSE_DATA_FILE_TYPE] ||
+                    EF_TYPE_LINEAR_FIXED != data[RESPONSE_DATA_STRUCTURE]) {
+                    throw new IccFileTypeMismatch();
                 }
 
+                recordSize = new int[3];
+                recordSize[0] = data[RESPONSE_DATA_RECORD_LENGTH] & 0xFF;
+                recordSize[1] = ((data[RESPONSE_DATA_FILE_SIZE_1] & 0xff) << 8)
+                       + (data[RESPONSE_DATA_FILE_SIZE_2] & 0xff);
+                recordSize[2] = recordSize[1] / recordSize[0];
+
                 sendResult(response, recordSize, null);
                 break;
 
@@ -579,32 +566,20 @@ public abstract class IccFileHandler extends Handler implements IccConstants {
                 data = result.payload;
                 path = lc.mPath;
 
-                if (UiccTlvData.isUiccTlvData(data)) {
-                    UiccTlvData tlvData = UiccTlvData.parse(data);
-
-                    if (tlvData.isIncomplete()) {
-                        throw new IccFileTypeMismatch();
-                    }
-
-                    lc.mRecordSize = tlvData.mRecordSize;
-                    lc.mCountRecords = tlvData.mNumRecords;
-                    size = tlvData.mFileSize;
-                } else {
-                    if (TYPE_EF != data[RESPONSE_DATA_FILE_TYPE]) {
-                        throw new IccFileTypeMismatch();
-                    }
+                if (TYPE_EF != data[RESPONSE_DATA_FILE_TYPE]) {
+                    throw new IccFileTypeMismatch();
+                }
 
-                    if (EF_TYPE_LINEAR_FIXED != data[RESPONSE_DATA_STRUCTURE]) {
-                        throw new IccFileTypeMismatch();
-                    }
+                if (EF_TYPE_LINEAR_FIXED != data[RESPONSE_DATA_STRUCTURE]) {
+                    throw new IccFileTypeMismatch();
+                }
 
-                    lc.mRecordSize = data[RESPONSE_DATA_RECORD_LENGTH] & 0xFF;
+                lc.mRecordSize = data[RESPONSE_DATA_RECORD_LENGTH] & 0xFF;
 
-                    size = ((data[RESPONSE_DATA_FILE_SIZE_1] & 0xff) << 8)
-                           + (data[RESPONSE_DATA_FILE_SIZE_2] & 0xff);
+                size = ((data[RESPONSE_DATA_FILE_SIZE_1] & 0xff) << 8)
+                       + (data[RESPONSE_DATA_FILE_SIZE_2] & 0xff);
 
-                    lc.mCountRecords = size / lc.mRecordSize;
-                }
+                lc.mCountRecords = size / lc.mRecordSize;
 
                  if (lc.mLoadAll) {
                      lc.results = new ArrayList<byte[]>(lc.mCountRecords);
@@ -634,27 +609,17 @@ public abstract class IccFileHandler extends Handler implements IccConstants {
 
                 fileid = msg.arg1;
 
-                if (UiccTlvData.isUiccTlvData(data)) {
-                    UiccTlvData tlvData = UiccTlvData.parse(data);
-
-                    if (tlvData.mFileSize < 0) {
-                        throw new IccFileTypeMismatch();
-                    }
-
-                    size = tlvData.mFileSize;
-                } else {
-                    if (TYPE_EF != data[RESPONSE_DATA_FILE_TYPE]) {
-                        throw new IccFileTypeMismatch();
-                    }
-
-                    if (EF_TYPE_TRANSPARENT != data[RESPONSE_DATA_STRUCTURE]) {
-                        throw new IccFileTypeMismatch();
-                    }
+                if (TYPE_EF != data[RESPONSE_DATA_FILE_TYPE]) {
+                    throw new IccFileTypeMismatch();
+                }
 
-                    size = ((data[RESPONSE_DATA_FILE_SIZE_1] & 0xff) << 8)
-                           + (data[RESPONSE_DATA_FILE_SIZE_2] & 0xff);
+                if (EF_TYPE_TRANSPARENT != data[RESPONSE_DATA_STRUCTURE]) {
+                    throw new IccFileTypeMismatch();
                 }
 
+                size = ((data[RESPONSE_DATA_FILE_SIZE_1] & 0xff) << 8)
+                       + (data[RESPONSE_DATA_FILE_SIZE_2] & 0xff);
+
                 mCi.iccIOForApp(COMMAND_READ_BINARY, fileid, getEFPath(fileid),
                                 0, 0, size, null, null, mAid,
                                 obtainMessage(EVENT_READ_BINARY_DONE,
-- 
1.9.1

